<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[浮动]]></title>
    <url>%2F2018%2F08%2F14%2F%E6%B5%AE%E5%8A%A8%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[关于元素的bfc]]></title>
    <url>%2F2018%2F08%2F14%2F%E5%85%B3%E4%BA%8Ebfc%E5%8F%8A%E7%94%A8%E9%80%94%2F</url>
    <content type="text"><![CDATA[bfc–块级格式化上下文具有bfc特性的元素可以看做是隔离了的独立容器。容器里面的元素无论怎样变化，都不会在布局上影响到外面的元素，并具有普通元素没有的特性。 能够触发bfc特性的以下任意一个条件均能触发元素的bfc属性：(1)float: left / right(除none);(2)overflow: hidden / auto / scroll(除visible);(3)position: absolute / fixed;(4)display: inline-block / flex / inline-flex / table-cell /table-caption;(5)根标签body; bfc的用途I.清除浮动当给子级元素设置浮动属性时，需要给父级清除浮动。浏览器呈现的情况如下：代码如下：1234567891011121314151617181920&lt;div class=&apos;wrapper&apos;&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;style&gt; .wrapper &#123; background: green; border: 2px solid #000; margin-top: 200px; &#125; .wrapper div &#123; float: left; margin: 30px; width: 100px; height: 100px; background: orange; &#125;&lt;/style&gt; 可以看到，父级包不住子级的div元素，需要给父级清除浮动触发父级的bfc，使其回到正常的文档流。 清除浮动的方法：123456789101112131415161718192021&lt;div class=&apos;wrapper&apos;&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;style&gt; .wrapper &#123; display: inline-block; background: green; border: 2px solid #000; margin-top: 200px; &#125; .wrapper div &#123; float: left; margin: 30px; width: 100px; height: 100px; background: orange; &#125;&lt;/style&gt; 清除浮动后的样式:这里是通过给父级添加属性’display: inline-block’来实现，你也可以通过其他方法试一试。 II.解决margin塌陷请看下面情况：此时明明给父级和子级都设置了margin-top，但是浏览器所展现出来的只有父级的margin-top。 代码如下：123456789101112131415161718&lt;div class=&quot;father&quot;&gt; &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;style&gt; .father &#123; margin-top: 200px; width: 260px; height: 260px; background: green; &#125; .son &#123; margin-top: 100px; width: 150px; height: 150px; background: orange; &#125;&lt;/style&gt; 这里涉及到盒子模型的概念。盒子模型的组成包括margin + border + padding + content。其中，在此提到的margin为复合属性，包括margin-top, margin-right, margin-bottom, margin-left。浏览器后台的盒子模型如下： margin塌陷指的是margin-top，针对的是具有父子结构嵌套的元素。 解决margin塌陷的方法1如果想要父级子级的margin-top都能正常的显示，此时只需要触发父级元素的bfc属性。12345678910111213141516171819&lt;div class=&quot;father&quot;&gt; &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;style&gt; .father &#123; overflow: hidden; margin-top: 200px; width: 260px; height: 260px; background: green; &#125; .son &#123; margin-top: 100px; width: 150px; height: 150px; background: orange; &#125;&lt;/style&gt; 修改后的展示如下： 上面是通过给父级添加overflow: hidden的属性来实现的，用overflow: hidden的缺点就是：如果子级元素大于父级元素时，子级多出父级元素的部分会被隐藏。 当子级溢出部分没有被隐藏时，实际展示效果如下： 此时和上面不同的只是使子级元素的宽度大于父级，多出的部分会超出父级正常显示。123456789101112131415161718&lt;div class=&quot;father&quot;&gt; &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;style&gt; .father &#123; margin-top: 200px; width: 260px; height: 260px; background: green; &#125; .son &#123; margin-top: 100px; width: 300px; height: 150px; background: orange; &#125;&lt;/style&gt; 给父级设置overflow：hidden属性后，浏览器显示如下：相应代码如下：12345678910111213141516171819&lt;div class=&quot;father&quot;&gt; &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;style&gt; .father &#123; overflow: hidden; margin-top: 200px; width: 260px; height: 260px; background: green; &#125; .son &#123; margin-top: 100px; width: 300px; height: 150px; background: orange; &#125;&lt;/style&gt; 此时虽然能解决margin塌陷带来的坏处，但是却使子级多出父级的部分溢出隐藏，如果想要使子级多出的部分正常显示，就可以采取其他的方法来触发元素的bfc属性。 解决margin塌陷的方法2通过计算解决：当子级元素的margin-top大于父级时，实际展示效果将以子级的margin-top为准，子级会带动父级一起向下运动。123456789101112131415161718&lt;div class=&quot;father&quot;&gt; &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;style&gt; .father &#123; margin-top: 200px; width: 260px; height: 260px; background: green; &#125; .son &#123; margin-top: 300px; width: 300px; height: 150px; background: orange; &#125;&lt;/style&gt; 以上代码通过计算来解决margin塌陷，实际上在浏览器中最终所展示的margin-top为300px,而且不会影响到子级元素的大小。]]></content>
      <categories>
        <category>布局</category>
      </categories>
      <tags>
        <tag>bfc</tag>
        <tag>html</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用算法]]></title>
    <url>%2F2018%2F08%2F12%2F%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[##二分法适用于有序数组 已知排列顺序的数组和待查找的数据function dichotomy (target, arr) { var first = 0; var len = arr.length; var last = len - 1; while (first &lt;= last) { var middle = (len % 2) === 0 ? Math.ceil(len /2) : len /2; if (target &gt; arr[middle]) { last = middle - 1; } else if (target &lt; arr[middle]) { first = middle + 1; } else{ return middle; } } return -1; }]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello MyBlog]]></title>
    <url>%2F2018%2F07%2F08%2Fhello-hexo%2F</url>
    <content type="text"><![CDATA[这是我搭建好博客后的第一篇文章，一切都会有个好的开始。 我是一个前端的小菜鸟，可能很多东西理解的也不太对，欢迎大家留言指正。 搭建博客博客基础这里主要借助的是 GitHub + Hexo 来进行搭建博客。可能你也像我一样是技术小白，可能你也正为如何搭建博客而烦恼，如果你想新建属于自己的博客，点击 这里 查看。 博客主题样式配置如果你想更换博客主题,配置自己喜欢的样式,点击 这里 查看。 上传本地博客相信看到这里的你已经按照以上的步骤配置好了属于自己的博客,此时博客只是在本地运行的,想要让本地博客能在浏览器里访问，快借助GitHub来进行配置吧！主要方法(在cmd工具栏中进入搭建博客的本地文件夹，输入如下命令)：1$ hexo g 1$ hexo d 具体可以参照 这里 来进行配置！ 新建文章新建页面配置好所有的环境之后，就可以在本地编辑器里写自己的博客内容了。首先，当然是要新建博客写作页面了。在hexo里面有三种新建的方式。在cmd里执行以下命令：1$ hexo new [layout] &lt;title&gt; 其中，layout为新建的位置，包含以下三个值：布局—————-路径post—————source/_posts (一般新建单个博客页面时使用)page—————source (用来配置和引入资源,包括图片,以及在搭建博客时的标签,分类页)draft—————source/_drafts (新建草稿)举个栗子:1$ hexo new post hello,hexo 1$ hexo new page tags 现在，你可以找到source文件夹查看具体区别。 配置参数每新建好一个文件，你可以看到最上面有用--- ---来隔开一个部分，这是用来进行参数匹配的。 在本篇博客里，我的配置是这样的：1234567---title: Hello MyBlogdate: 2018-07-08 09:58:00tags: [hexo,blog,essay]categories: 搭建博客comments: true--- 其中，tags和categories参数你需要先建立页面1$ hexo new page tags 1$ hexo new page categories 并在source文件夹下找到对应的tags页面，配置以下参数：12345---title: tagsdate: 2018-07-07 13:23:03type: &apos;tags&apos;--- 同理，在categories页面中配置：12345---title: categoriesdate: 2018-07-08 21:21:28type: &apos;categories&apos;--- 到这里，页面基本参数就配置好了，接下来主要就是要发布的博客内容。 文章标题一级标题：&lt;h1&gt;&lt;/h1&gt; –表示方法：# 名称二级标题：&lt;h2&gt;&lt;/h2&gt; –表示方法：## 名称三级标题：&lt;h3&gt;&lt;/h3&gt; –表示方法：### 名称一般我们标题都是用来语义化表示题目内容的，不宜嵌套太深，主要常用的就是前三级标题 网址链接表示方式：1[要显示的内容](与该内容相关的网址) 1[这里](https://www.jianshu.com/p/9d1b865217a5) 其他内容就正常书写就好啦！ 上传博客内容写到这里本篇博客内容页该结束啦！此时想要把本地写好的博客内容上传到浏览器里查看，只要执行以下代码就可以啦！开心~~~12$ hexo g$ hexo d 具体内容可以点击 这里 查看hexo官方文档]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
        <tag>essay</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F07%2F07%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
